#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './path/to/binary')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

#===========================================================
#                    COREFILE GOES HERE
#===========================================================

def inspect_core(core_path, elf_path=None, libc_path=None, stack_lines=STACK_LINES):
    core = Core(core_path)
    exe  = ELF(elf_path) if elf_path else core.exe

    banner = "="*80
    print(f"\n{banner}\n COREFILE INSPECTION: {core_path}\n{banner}\n")

    # 1) Registers
    print("1) Registers at crash:\n")
    for reg, val in core.registers.items():
        print(f" {reg.upper():<8} {val:#018x}")
    print("\n" + "-"*80 + "\n")

    # 2) Memory mappings
    print("2) Memory Mappings:\n")
    for m in core.mappings:
        path = m.path or "[anonymous]"
        print(f" {m.start:#018x} - {m.stop:#018x}  {m.permstr:<6}  {path}")
    print("\n" + "-"*80 + "\n")

    # 3) Binary info
    base = core.exe.address
    print("3) Binary Info:\n")
    print(f" Path:       {core.exe}")
    print(f" Base addr:  {base:#018x}")
    print(f" Entry:      {exe.entry:#018x}")
    print(f" ARCH:       {exe.arch}\n")
    print(" Symbols (first 8):")
    for sym in list(exe.symbols)[:8]:
        print(f"  {sym:<20} {exe.symbols[sym]:#018x}")
    print("\n" + "-"*80 + "\n")

    # 4) libc info
    mapping = None
    if libc_path:
        mapping = next((m for m in core.mappings if libc_path in (m.path or "")), None)
    if not mapping:
        mapping = next((m for m in core.mappings if m.path and 'libc' in m.path), None)
    if mapping:
        lb = mapping.start
        ld = ELF(libc_path or mapping.path)
        ld.address = lb
        print("4) libc Info:\n")
        print(f" Path:       {ld.path}")
        print(f" Base addr:  {lb:#018x}")
        for sym in ('system','execve','exit'):
            if sym in ld.symbols:
                print(f"  {sym:<10} {ld.symbols[sym]:#018x}")
        print("\n" + "-"*80 + "\n")

    # 5) styled stack dump
    print(f"5) Stack Dump (RSP = {core.rsp:#018x}):\n")
    rsp   = core.rsp
    width = context.bytes

    header = f"  {'Address':<18} {'Value':<18} {'-> Deref':<18} Marker"
    print(header)
    print("  " + "-"*(len(header)-2))
    for i in range(stack_lines):
        addr = rsp + i*width
        try:
            raw = core.read(addr, width)
            val = u64(raw)
            # one‑level deref
            try:
                d_val = u64(core.read(val, width))
                d_str = f"{d_val:#018x}"
            except:
                d_str = ""
            mark = ""
            if addr == core.rbp: mark += " [RBP]"
            if addr == core.rip: mark += " [RIP]"
            print(f"  {addr:#018x}  {val:#018x}  {d_str:<18}{mark}")
        except:
            print(f"  {addr:#018x}  <unreadable>")
    print("\n" + banner + "\n")

# ─── EXPLOIT & INSPECTION ─────────────────────────────────────────────────────

BINARY = './binary'
LIBC = './libc'

io.wait()
inspect_core(io.corefile.path, BINARY, LIBC)

# io.interactive()  # uncomment if you want shell afterward








